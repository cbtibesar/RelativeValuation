{"ast":null,"code":"var _jsxFileName = \"/Users/conradtibesar/Documents/Com Sci/Python/RelativeValuator/relativevaluator/frontend/src/components/AverageTable.js\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AverageTable = ({\n  averageData\n}) => {\n  const billion = 1000000000;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Market Cap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Forward PE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise to Revenue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise to EBITDA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Profit Margins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"ROE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: (averageData.marketCap / billion).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: (averageData.enterpriseValue / billion).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.forwardPE.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.enterpriseToRev.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.enterpriseToEbitda.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.profitMargins.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.roe.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n\n_c = AverageTable;\nexport default AverageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"AverageTable\");","map":{"version":3,"sources":["/Users/conradtibesar/Documents/Com Sci/Python/RelativeValuator/relativevaluator/frontend/src/components/AverageTable.js"],"names":["useState","AverageTable","averageData","billion","marketCap","toFixed","enterpriseValue","forwardPE","enterpriseToRev","enterpriseToEbitda","profitMargins","roe"],"mappings":";AAAA,SAAQA,QAAR,QAAuB,OAAvB;;;AAEA,MAAMC,YAAY,GAAE,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AACnC,QAAMC,OAAO,GAAG,UAAhB;AAEA,sBACI;AAAA,4BACI;AAAA,6BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAYI;AAAA,6BACK;AAAA,gCACU;AAAA,oBAAM,CAACD,WAAW,CAACE,SAAZ,GAAuBD,OAAxB,EAAiCE,OAAjC,CAAyC,CAAzC;AAAN;AAAA;AAAA;AAAA;AAAA,gBADV,eAEU;AAAA,oBAAM,CAACH,WAAW,CAACI,eAAZ,GAA4BH,OAA7B,EAAsCE,OAAtC,CAA8C,CAA9C;AAAN;AAAA;AAAA;AAAA;AAAA,gBAFV,eAGU;AAAA,oBAAMH,WAAW,CAACK,SAAZ,CAAsBF,OAAtB,CAA8B,CAA9B;AAAN;AAAA;AAAA;AAAA;AAAA,gBAHV,eAIU;AAAA,oBAAMH,WAAW,CAACM,eAAZ,CAA4BH,OAA5B,CAAoC,CAApC;AAAN;AAAA;AAAA;AAAA;AAAA,gBAJV,eAKU;AAAA,oBAAMH,WAAW,CAACO,kBAAZ,CAA+BJ,OAA/B,CAAuC,CAAvC;AAAN;AAAA;AAAA;AAAA;AAAA,gBALV,eAMU;AAAA,oBAAMH,WAAW,CAACQ,aAAZ,CAA0BL,OAA1B,CAAkC,CAAlC;AAAN;AAAA;AAAA;AAAA;AAAA,gBANV,eAOU;AAAA,oBAAMH,WAAW,CAACS,GAAZ,CAAgBN,OAAhB,CAAwB,CAAxB;AAAN;AAAA;AAAA;AAAA;AAAA,gBAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH,CA7BD;;KAAMJ,Y;AA+BN,eAAeA,YAAf","sourcesContent":["import {useState} from \"react\";\n\nconst AverageTable =({ averageData })=>{\n    const billion = 1000000000\n\n    return(\n        <table>\n            <thead>\n                <tr>\n                    <th>Market Cap</th>\n                    <th>Enterprise Value</th>\n                    <th>Forward PE</th>\n                    <th>Enterprise to Revenue</th>\n                    <th>Enterprise to EBITDA</th>\n                    <th>Profit Margins</th>\n                    <th>ROE</th>\n                </tr>\n            </thead>\n            <tbody>\n                 <tr>\n                           <td>{ (averageData.marketCap /billion).toFixed(2)}</td>\n                           <td>{ (averageData.enterpriseValue/billion).toFixed(2) }</td>\n                           <td>{ averageData.forwardPE.toFixed(2) }</td>\n                           <td>{ averageData.enterpriseToRev.toFixed(2) }</td>\n                           <td>{ averageData.enterpriseToEbitda.toFixed(2) }</td>\n                           <td>{ averageData.profitMargins.toFixed(2) }</td>\n                           <td>{ averageData.roe.toFixed(2) }</td>\n                    </tr>\n            </tbody>\n        </table>\n    );\n}\n\nexport default AverageTable"]},"metadata":{},"sourceType":"module"}