{"ast":null,"code":"var _jsxFileName = \"/Users/conradtibesar/Documents/Com Sci/Python/RelativeValuator/relativevaluator/frontend/src/components/Table.js\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = ({\n  data\n}) => {\n  const billion = 1000000000;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Ticker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Company\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Sector\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Current Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Market Cap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Forward PE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise to Revenue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise to EBITDA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Profit Margins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"ROE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: data.map(stock => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.ticker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.companyName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.sector\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.currentPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: (stock.marketCap / billion).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: (stock.enterpriseValue / billion).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.forwardPE.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.enterpriseToRev.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.enterpriseToEbitda.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.profitMargins.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.roe.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/conradtibesar/Documents/Com Sci/Python/RelativeValuator/relativevaluator/frontend/src/components/Table.js"],"names":["React","useState","useEffect","Table","data","billion","map","stock","ticker","companyName","sector","currentPrice","marketCap","toFixed","enterpriseValue","forwardPE","enterpriseToRev","enterpriseToEbitda","profitMargins","roe"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;AAEA,MAAMC,KAAK,GAAC,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AACrB,QAAMC,OAAO,GAAG,UAAhB;AAEA,sBACI;AAAA,4BACI;AAAA,6BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAgBI;AAAA,gBAEQD,IAAI,CAACE,GAAL,CAAUC,KAAD,iBACL;AAAA,gCACI;AAAA,oBAAMA,KAAK,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAMD,KAAK,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,oBAAMF,KAAK,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAA,oBAAMH,KAAK,CAACI;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI;AAAA,oBAAM,CAACJ,KAAK,CAACK,SAAN,GAAiBP,OAAlB,EAA2BQ,OAA3B,CAAmC,CAAnC;AAAN;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAA,oBAAM,CAACN,KAAK,CAACO,eAAN,GAAuBT,OAAxB,EAAiCQ,OAAjC,CAAyC,CAAzC;AAAN;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI;AAAA,oBAAMN,KAAK,CAACQ,SAAN,CAAgBF,OAAhB,CAAwB,CAAxB;AAAN;AAAA;AAAA;AAAA;AAAA,gBAPJ,eAQI;AAAA,oBAAMN,KAAK,CAACS,eAAN,CAAsBH,OAAtB,CAA8B,CAA9B;AAAN;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI;AAAA,oBAAMN,KAAK,CAACU,kBAAN,CAAyBJ,OAAzB,CAAiC,CAAjC;AAAN;AAAA;AAAA;AAAA;AAAA,gBATJ,eAUI;AAAA,oBAAMN,KAAK,CAACW,aAAN,CAAoBL,OAApB,CAA4B,CAA5B;AAAN;AAAA;AAAA;AAAA;AAAA,gBAVJ,eAWI;AAAA,oBAAMN,KAAK,CAACY,GAAN,CAAUN,OAAV,CAAkB,CAAlB;AAAN;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAFR;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuCH,CA1CD;;KAAMV,K;AA4CN,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nconst Table=({ data })=> {\n    const billion = 1000000000\n\n    return(\n        <table>\n            <thead>\n                <tr>\n                    <th>Ticker</th>\n                    <th>Company</th>\n                    <th>Sector</th>\n                    <th>Current Price</th>\n                    <th>Market Cap</th>\n                    <th>Enterprise Value</th>\n                    <th>Forward PE</th>\n                    <th>Enterprise to Revenue</th>\n                    <th>Enterprise to EBITDA</th>\n                    <th>Profit Margins</th>\n                    <th>ROE</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    data.map((stock) => (\n                        <tr>\n                            <td>{ stock.ticker }</td>\n                            <td>{ stock.companyName }</td>\n                            <td>{ stock.sector }</td>\n                            <td>{ stock.currentPrice }</td>\n                            <td>{ (stock.marketCap /billion).toFixed(2) }</td>\n                            <td>{ (stock.enterpriseValue /billion).toFixed(2) }</td>\n                            <td>{ stock.forwardPE.toFixed(2) }</td>\n                            <td>{ stock.enterpriseToRev.toFixed(2) }</td>\n                            <td>{ stock.enterpriseToEbitda.toFixed(2) }</td>\n                            <td>{ stock.profitMargins.toFixed(2) }</td>\n                            <td>{ stock.roe.toFixed(2) }</td>\n                        </tr>\n                    ))\n                }\n            </tbody>\n\n        </table>\n    )\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}