{"ast":null,"code":"var _jsxFileName = \"/Users/conradtibesar/Documents/Com Sci/Python/RelativeValuator/relativevaluator/frontend/src/components/AverageTable.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AverageTable = ({\n  stocks\n}) => {\n  _s();\n\n  const billion = 1000000000;\n  const [averageData, setAverageData] = useState({});\n  const numStocks = stocks.length;\n  let averagePE = 0;\n  let averageEnterpriseValue = 0;\n  let averageMarketCap = 0;\n  let averageRoe = 0;\n  let averageEnterpriseToRev = 0;\n  let averageEnterpriseToEbitda = 0;\n  let averageProfitMargins = 0;\n  stocks.forEach(stock => {\n    averagePE += stock.forwardPE;\n    averageEnterpriseToEbitda += stock.enterpriseToEbitda;\n    averageEnterpriseToRev += stock.enterpriseToRev;\n    averageMarketCap += stock.marketCap;\n    averageRoe += stock.roe;\n    averageEnterpriseValue += stock.enterpriseValue;\n    averageProfitMargins += stock.profitMargins;\n  });\n  setAverageData({\n    forwardPE: averagePE / numStocks,\n    enterpriseValue: averageEnterpriseValue / numStocks,\n    enterpriseToRev: averageEnterpriseToRev / numStocks,\n    enterpriseToEbitda: averageEnterpriseToEbitda / numStocks,\n    marketCap: averageMarketCap / numStocks,\n    profitMargins: averageProfitMargins / numStocks,\n    roe: averageRoe / numStocks\n  });\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Market Cap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Enterprise Value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Forward PE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Enterprise to Revenue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Enterprise to EBITDA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"Profit Margins\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"ROE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: (averageData.marketCap / billion).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: (averageData.enterpriseValue / billion).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.forwardPE\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.enterpriseToRev\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.enterpriseToEbitda\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.profitMargins\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: averageData.roe\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 20\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AverageTable, \"Lzfn+4uiJK5W1eMlr54FRBgLV00=\");\n\n_c = AverageTable;\nexport default AverageTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"AverageTable\");","map":{"version":3,"sources":["/Users/conradtibesar/Documents/Com Sci/Python/RelativeValuator/relativevaluator/frontend/src/components/AverageTable.js"],"names":["useState","AverageTable","stocks","billion","averageData","setAverageData","numStocks","length","averagePE","averageEnterpriseValue","averageMarketCap","averageRoe","averageEnterpriseToRev","averageEnterpriseToEbitda","averageProfitMargins","forEach","stock","forwardPE","enterpriseToEbitda","enterpriseToRev","marketCap","roe","enterpriseValue","profitMargins","toFixed"],"mappings":"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","sourcesContent":["import {useState} from \"react\";\n\nconst AverageTable =({ stocks })=>{\n    const billion = 1000000000\n    const [averageData, setAverageData] = useState({})\n    const numStocks = stocks.length\n    let averagePE = 0;\n    let averageEnterpriseValue = 0;\n    let averageMarketCap = 0;\n    let averageRoe = 0;\n    let averageEnterpriseToRev = 0;\n    let averageEnterpriseToEbitda = 0;\n    let averageProfitMargins = 0;\n    stocks.forEach((stock) => {\n        averagePE += stock.forwardPE\n        averageEnterpriseToEbitda += stock.enterpriseToEbitda\n        averageEnterpriseToRev += stock.enterpriseToRev\n        averageMarketCap += stock.marketCap\n        averageRoe += stock.roe\n        averageEnterpriseValue += stock.enterpriseValue\n        averageProfitMargins += stock.profitMargins\n    })\n\n    setAverageData({forwardPE:(averagePE/numStocks),\n    enterpriseValue:(averageEnterpriseValue/numStocks),\n    enterpriseToRev:(averageEnterpriseToRev/numStocks),\n    enterpriseToEbitda:(averageEnterpriseToEbitda/numStocks),\n    marketCap:(averageMarketCap/numStocks),\n    profitMargins:(averageProfitMargins/numStocks),\n    roe:(averageRoe/numStocks)})\n\n\n    return(\n        <table>\n            <thead>\n                <th>Market Cap</th>\n                <th>Enterprise Value</th>\n                <th>Forward PE</th>\n                <th>Enterprise to Revenue</th>\n                <th>Enterprise to EBITDA</th>\n                <th>Profit Margins</th>\n                <th>ROE</th>\n            </thead>\n            <tbody>\n               <tr>\n\n                   <td>{ (averageData.marketCap /billion).toFixed(2)}</td>\n                   <td>{ (averageData.enterpriseValue/billion).toFixed(2) }</td>\n                   <td>{ averageData.forwardPE }</td>\n                   <td>{ averageData.enterpriseToRev }</td>\n                   <td>{ averageData.enterpriseToEbitda }</td>\n                   <td>{ averageData.profitMargins }</td>\n                   <td>{ averageData.roe }</td>\n               </tr>\n            </tbody>\n        </table>\n    );\n}\n\nexport default AverageTable"]},"metadata":{},"sourceType":"module"}