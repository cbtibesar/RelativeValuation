{"ast":null,"code":"var _jsxFileName = \"/Users/conradtibesar/Documents/Com Sci/Python/RelativeValuator/relativevaluator/frontend/src/components/Table.js\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = ({\n  data\n}) => {\n  const myData = [{\n    \"ticker\": \"AAPL\",\n    \"companyName\": \"Apple Inc.\",\n    \"sector\": \"Technology\",\n    \"currentPrice\": 149.1,\n    \"marketCap\": 2464652984320.0,\n    \"enterpriseValue\": 2538442850304.0,\n    \"forwardPE\": 27.921349,\n    \"enterpriseToRev\": 7.312,\n    \"enterpriseToEbitda\": 22.882,\n    \"profitMargins\": 0.25004,\n    \"roe\": 1.27125\n  }, {\n    \"ticker\": \"MSFT\",\n    \"companyName\": \"Microsoft Corporation\",\n    \"sector\": \"Technology\",\n    \"currentPrice\": 292.85,\n    \"marketCap\": 2200735580160.0,\n    \"enterpriseValue\": 2152757854208.0,\n    \"forwardPE\": 34.988052,\n    \"enterpriseToRev\": 12.807,\n    \"enterpriseToEbitda\": 26.638,\n    \"profitMargins\": 0.36451998,\n    \"roe\": 0.47079\n  }, {\n    \"ticker\": \"MSFT\",\n    \"companyName\": \"Microsoft Corporation\",\n    \"sector\": \"Technology\",\n    \"currentPrice\": 292.85,\n    \"marketCap\": 2200735580160.0,\n    \"enterpriseValue\": 2152757854208.0,\n    \"forwardPE\": 34.988052,\n    \"enterpriseToRev\": 12.807,\n    \"enterpriseToEbitda\": 26.638,\n    \"profitMargins\": 0.36451998,\n    \"roe\": 0.47079\n  }, {\n    \"ticker\": \"MSFT\",\n    \"companyName\": \"Microsoft Corporation\",\n    \"sector\": \"Technology\",\n    \"currentPrice\": 294.6,\n    \"marketCap\": 2213886820352.0,\n    \"enterpriseValue\": 2152757854208.0,\n    \"forwardPE\": 29.430569,\n    \"enterpriseToRev\": 12.807,\n    \"enterpriseToEbitda\": 26.638,\n    \"profitMargins\": 0.36451998,\n    \"roe\": 0.47079\n  }, {\n    \"ticker\": \"MSFT\",\n    \"companyName\": \"Microsoft Corporation\",\n    \"sector\": \"Technology\",\n    \"currentPrice\": 294.6,\n    \"marketCap\": 2213886820352.0,\n    \"enterpriseValue\": 2152757854208.0,\n    \"forwardPE\": 29.430569,\n    \"enterpriseToRev\": 12.807,\n    \"enterpriseToEbitda\": 26.638,\n    \"profitMargins\": 0.36451998,\n    \"roe\": 0.47079\n  }];\n  const billion = 1000000000;\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Ticker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Company\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Sector\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Current Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Market Cap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Forward PE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise to Revenue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Enterprise to EBITDA\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Profit Margins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"ROE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: myData.map(stock => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.ticker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.companyName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.sector\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.currentPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: (stock.marketCap / billion).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: (stock.enterpriseValue / billion).toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.forwardPE.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.enterpriseToRev.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.enterpriseToEbitda.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.profitMargins.toFixed(3)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: stock.roe.toFixed(2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/conradtibesar/Documents/Com Sci/Python/RelativeValuator/relativevaluator/frontend/src/components/Table.js"],"names":["React","useState","useEffect","Table","data","myData","billion","map","stock","ticker","companyName","sector","currentPrice","marketCap","toFixed","enterpriseValue","forwardPE","enterpriseToRev","enterpriseToEbitda","profitMargins","roe"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\n\nconst Table=({ data })=> {\n    const myData =  [\n        {\n            \"ticker\": \"AAPL\",\n            \"companyName\": \"Apple Inc.\",\n            \"sector\": \"Technology\",\n            \"currentPrice\": 149.1,\n            \"marketCap\": 2464652984320.0,\n            \"enterpriseValue\": 2538442850304.0,\n            \"forwardPE\": 27.921349,\n            \"enterpriseToRev\": 7.312,\n            \"enterpriseToEbitda\": 22.882,\n            \"profitMargins\": 0.25004,\n            \"roe\": 1.27125\n        },\n        {\n            \"ticker\": \"MSFT\",\n            \"companyName\": \"Microsoft Corporation\",\n            \"sector\": \"Technology\",\n            \"currentPrice\": 292.85,\n            \"marketCap\": 2200735580160.0,\n            \"enterpriseValue\": 2152757854208.0,\n            \"forwardPE\": 34.988052,\n            \"enterpriseToRev\": 12.807,\n            \"enterpriseToEbitda\": 26.638,\n            \"profitMargins\": 0.36451998,\n            \"roe\": 0.47079\n        },\n        {\n            \"ticker\": \"MSFT\",\n            \"companyName\": \"Microsoft Corporation\",\n            \"sector\": \"Technology\",\n            \"currentPrice\": 292.85,\n            \"marketCap\": 2200735580160.0,\n            \"enterpriseValue\": 2152757854208.0,\n            \"forwardPE\": 34.988052,\n            \"enterpriseToRev\": 12.807,\n            \"enterpriseToEbitda\": 26.638,\n            \"profitMargins\": 0.36451998,\n            \"roe\": 0.47079\n        },\n        {\n            \"ticker\": \"MSFT\",\n            \"companyName\": \"Microsoft Corporation\",\n            \"sector\": \"Technology\",\n            \"currentPrice\": 294.6,\n            \"marketCap\": 2213886820352.0,\n            \"enterpriseValue\": 2152757854208.0,\n            \"forwardPE\": 29.430569,\n            \"enterpriseToRev\": 12.807,\n            \"enterpriseToEbitda\": 26.638,\n            \"profitMargins\": 0.36451998,\n            \"roe\": 0.47079\n        },\n        {\n            \"ticker\": \"MSFT\",\n            \"companyName\": \"Microsoft Corporation\",\n            \"sector\": \"Technology\",\n            \"currentPrice\": 294.6,\n            \"marketCap\": 2213886820352.0,\n            \"enterpriseValue\": 2152757854208.0,\n            \"forwardPE\": 29.430569,\n            \"enterpriseToRev\": 12.807,\n            \"enterpriseToEbitda\": 26.638,\n            \"profitMargins\": 0.36451998,\n            \"roe\": 0.47079\n        }\n    ]\n    const billion = 1000000000\n\n    return(\n        <table>\n            <thead>\n                <tr>\n                    <th>Ticker</th>\n                    <th>Company</th>\n                    <th>Sector</th>\n                    <th>Current Price</th>\n                    <th>Market Cap</th>\n                    <th>Enterprise Value</th>\n                    <th>Forward PE</th>\n                    <th>Enterprise to Revenue</th>\n                    <th>Enterprise to EBITDA</th>\n                    <th>Profit Margins</th>\n                    <th>ROE</th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    myData.map((stock) => (\n                        <tr>\n                            <td>{ stock.ticker }</td>\n                            <td>{ stock.companyName }</td>\n                            <td>{ stock.sector }</td>\n                            <td>{ stock.currentPrice }</td>\n                            <td>{ (stock.marketCap /billion).toFixed(2) }</td>\n                            <td>{ (stock.enterpriseValue /billion).toFixed(2) }</td>\n                            <td>{ (stock.forwardPE).toFixed(2) }</td>\n                            <td>{ (stock.enterpriseToRev).toFixed(2) }</td>\n                            <td>{ (stock.enterpriseToEbitda).toFixed(2) }</td>\n                            <td>{ (stock.profitMargins).toFixed(3) }</td>\n                            <td>{ (stock.roe).toFixed(2) }</td>\n                        </tr>\n                    ))\n                }\n            </tbody>\n\n        </table>\n    );\n}\n\nexport default Table"]},"metadata":{},"sourceType":"module"}